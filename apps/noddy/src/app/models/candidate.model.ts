import * as mongoose from 'mongoose';
import Candidate from '../interfaces/candidate.interface';
import positionModel from './position.model';

const candidateSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true,
    unique: true,
    trim: true,
    uppercase: true
  },
  gender: {
    type: String,
    required: true
  },
  nickname: {
    type: String,
    trim: true,
    uppercase: true
  },
  dob: {
    type: String,
    required: true
  },
  room: {
    type: String,
    required: true
  },
  position: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Position',
    required: true
  },
  election: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Election'
  },
  photo: {
    type: Buffer,
    default:
      '/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCADIAMgDASIAAhEBAxEB/8QAHQABAAEEAwEAAAAAAAAAAAAAAAgBBgcJAgMFBP/EAEYQAAEDAwMCAwQGBwUFCQAAAAEAAgMEBREGEiEHMQhBURMiYbEUFTI0cYEWQlJyc5GhIzNidNIXJCc3YzZTVVaTlKKys//EABYBAQEBAAAAAAAAAAAAAAAAAAACAf/EABYRAQEBAAAAAAAAAAAAAAAAAAABIf/aAAwDAQACEQMRAD8AlSiIgIiICIiAiLhPLHBE+WZ7Y4mAuc9xADQO5JPYIOZ7LiFbeqtdaZ0rSunvt4pKZjZBEWh294cQSAWtyRwPRRg6teJKuvdPPa9Ex1Frpd7T9Yl+2ocByQ0D7A3eYOSPTKCXVyr6W2UVRWXCoipqSnYZZZZXBrWNHck+iwNL4pNKs1DHSRW6uktDsb7hnDmnBP8AdYyecDv5qIuoNR3nUdYyqv1zq7hUsjETZKmUvcGAk7cnyySfzXlZKCbV88Tui6S3STWqG43CrBGyndF7EOGcE7zkDAyeytafxZ0pgeKfSc7Zi07C+tBaD5ZGzkKJ2eUyc580EzNGeKDTldQsbqqjqLZXNDGudA0yxyOx7zh5sGfIk8eaybpnqtorUjaIW7UFD9JrHezhpJpAycu3EBpYeQSRx+IWubJQOIIIJBHYjyQbUxnHKKCug/ERrHT01HDdqr64trJS6dtR7072nuBIeRjuB+Sm1YLvS32yUN1t799JWQtmjJIyA4ZwcEjI7EZ7goPQRUBJVUBERAKIUQdFbzRTj/pu+SJW8UU/8N3yKImu9ERFCIiAiIgE4WOuu+pLdYend2guxqI4rnSVFEyaOB0jI5HxkN37ewJIGVkN5DQSTgDkkngBQZ8T+v7nqLW9XYZGmCz2uYfR4nMDXucWNy9xDiHAnJb/AISPNBhqqqJqqd89VNJPM85dJI4uc74knkrqBwhOQuKAiKqABlMfmux8EsccT3sIZK0uYf2gCQf6gruudKKGtlpm1FPVCM49tTuLo3cfqkgcfkg+RFVUQcgcBXr0+6naq0LURmx3OX6G1zd9FP8A2kL2h24t2n7GTnJbg8nlWSqjg+iDZJ0w1zb+oOlIb1bWvj94xTwPHMUgAJbnzHIwQrt3LXZ0e6m3TptqA1VGDUW2oLW1lE52BK0diD5OGTg/EqdHTrXlj6gWZ9x09LK6OOQxyxTN2SRu8twye45HPZBdiIiAUQog6az7nN6bHfJErPuc/wDDd8kRNdyIiKEREBERBbnUW6Udm0Nfa65zexpI6ORrn7S7BcNrRgAnkuA/Nazypn+NG5RQdPrXb21jY6uouDZPo4kw6SJsbw4482hxZ+ZChieyDiiqO6+2y0P1neKGgEjITVzxwe1fyGbnBu4/AZyg+FVCnpprw+aAtlogpq61fWtSAHPqqiZ4c44GcbC0YznHC9UdDOmxH/Zal/8AWm/1oNfHHw/FelQ2G8XGlNVb7TcKqmyWmWCme9mfMbgMZWwmwdK9D6eq31Np05RQzvbsLn7pePweSArupKOmo4fYUlPDTw5z7OJga38cBBrROkdSbWH9HrziQ+5/uUmHfh7vK5foVqn/AMtXv/2Ev+lbM9o44HHbjsqoNYFzsF4tEDZbrabhQxPdta+ppnxNce+AXAc8LyytpVdRUtfG2KupYKmMHcGTRh4B9cFYr6l9B9Ka0E1VTwmz3d4JFTSgBj3Bm1u+PsWjA+ztJ9UECQszeF3XZ0l1Bgt9ZO5tpu5FNI0ue5rJT/duDG5y4u2szjgOKxPerZVWa7VduuEEkFXTSGOSORu1wI9R/VdNDUGkrKeqaxkjoZGyBjs4cQc4O0g4OPIg/FBtLReLpC6U160xarhRTQTQVFMxzXQv3MzjDgCSTwQRyc8L2h2QCiFEHTWfc5/4bvkiVn3Of+G75Iia7kREUIiICIiCI/jfmiffNKxMkY6WOCoL2BwLmguZjI8s4P8AJRlJWavF0B/tlqf8lB8isKkIKDuvT064s1Ba3Du2qiPPrvC4WSjp6yqk+mTOhpoYnSvcwZcQMcD48r2NB0zP05skdZQT1FPNUMAhwQ5zXHAd+Wc5+CMrZFb3b7fTP/aiaf6BfSOy+CxxuhtVNG6V8mxu3c8YJAPH9ML7x2RomERAREQMKh47Kqo5BDzxjaJqaLUlLqykp4hbayNtPO6MAFs4yQX+pcDwf8Byo4ZU9vFNZnXjo/cnNeWmglZWn4huW4/+SgQg2E+HA/8ABPS38CT/APZ6yWFhrwoXiC69IKOnhhkidbaiSjkL35EjuJMt9BiQDHqCsyjsgFChQoOitOKKc/8ATd8kSt5op/4bvkiJrvRERQiIgIiIIc+NSz0tFrGyXWIympuFM9swLhtHsi0NwMcfaOVHP8VMzxq0lO7p3aax1PEaqO5sibPsG9rHRSEtDu+CWtOPgFDM8oOTJHM3bHFu4bTjzCyP4f6WqreqFpZSVEMBa/c98oyfZjuGj1I4/ArGo7q6unOs6vQmpobzQU1LUyMG10c7AQQfQ92n4jnyRl1soAAaMdvJVCjzonxQacuQgh1RSVFoqCxxlqGtMsAIPAAbl/Ix5d1n621tPcaCnrKGZk9LOwSRSsOWvaRkEI19CIh7IGUWNr31r0DY7tVWy63qSlrqWQxSxPop/dcD+5gj0I4PkviPiB6Zgcaiz8BRT/6EGVsp3WMY+uvTmSiNUzUbCwSNi2CmmMhc4EjDNu4jg8gY7DzCyPQ1UVZSxVEG/wBlKxr272OYcEZGWuAIPPYjKDGfiYnuFP0cvYtlK2oErWx1JJ/uoSfeePiCB/Na/wDC2Ndcqaas6R6pgpo3yzPonbWMaXE8g8AcrXPwPignZ4ULlBcOj9FDAxjHUU8lNKW93OyH5Pxw8fyCzK3ssXeGikpqborp19NBFE+oZJLKWNDTI/2jm7nepw0DJ8gFlEIBRCiDqqhmlmHqw/JFSrOKSY+jHfJETXciIihERAXCRxDHYODtOFzXFw3NIPnxwg1i6i1DeL9W1M94uVVWPlmdM8SyEt3knkN7Dv5ALyW91cfUu0Utg6gahtNvDxR0VbLBEHu3O2tcQMnzKtsIPfoHWWm03VzzF1Ve5ZBDFTSRERQxd3SbgRl+cADsBuznIx511rI6+ulqIaGloWOxiCm3ezb+G5xP9V8kZDXguGW55GcZHos6dNOjlH1ToJbrapY7Bb4d0Ri9q+qlfLu4zua0Bu3PYny7IMEkHOMYPopMeGTrRTWeng0fqd3s6QvxQVmSdjnHHs35PA54Ixjt58ef4kOnVDovR2n5Tcm197mqJfpVZVB30irAZG1obgEBjGtAwT58ZyVHmOR8UjZInFkjHBzXNOC0jsQg2n5VsWXSFNaL7frpDcrnLLeJWSyxTTB0cO0OGIhj3R73PfsF9mhppanRWn56iR8s8lvp3ve85c5xjaSSfUlezLGHxPZkt3AjLTgjPog1/wDWOi05bdd18YvNw1DXPrZpK2drmxiMEnEQJadzxkZcMNGCA0eWUum2j9Cy2p8kujv0hpW4llnpby24VUJc1u1nsYWswM5znkZOcrz7n0kitkHUaiutvuFXdXYqLTcywTh8ftGv298+1d2JI7F3Pr5/RTo5qi6Xe2T3uimsVpo5zWtrowI6uV3ugRteDuAG3Iz2ycd0EndJ1mjtSCZ1qt1vZW0bwyopZqRkdRSv8g9hGWnj+ivQLDVN0fq5bvX1l0vUjqynrY6mzXdhL6+KMZ3xTSHG9m07QCexKzIO5KCw+vMskPR7VckT3xvbROw5hII5HmFr903Y7hqS+Ulps1K+qr6p+yOJo/Mk+gAySfIAlbAOv3/JvVn+Sd8wvE8OWg7ZpLQFuuFKTPcLxSxVlRO9uCA9ocI2+gGcfEjKC7ulum5dHaBsun6uojqKijhLXvYMAkuLjgeg3Yz8Mq7BwF4tXpi11WqqDUckGLvRwSU0c7Tgujf3a79oA5Iz2JPqvaQCiFEHTWfc5/3HfJErPuc/8N3yRE13IiIoREQEIREECPFFpk2DqzcZo46oU1z/AN8bLM33XPdy8MOMEAkfhnlYkAUoPHC1xueknYOwQ1IzjjO6NRfCCTXQPobpzVen7fqS8Vs9bGXH2lGx22PcO7HEe9xx2PmpT22gt9mpmUNso4aKlY0uEcMQZGOeTwMZWGvB7coqjpa+kdLH7enrpR7MHDtpa0gkfzWQ+r93qLH02v1fSCL2rKV7A6SXYGbhtyDg5PPA9UYhv4lNafpd1LqxSVAltduaKSnLHHY7HLn4PGdxIz5hoWONP08dXfrZTTt3QzVMUTx2y1zgCP5FfA9xe5znu3OccknuSrw6QadqNU9RrHbaZxjJqGzPl2FwY1nvEkflj80a2M2+kgoKGno6Rns6enjbDEzP2WNAAH8gvoVBhVyg4hgaSQBk9z5lVxyqogphVAREFj9b6Weu6UalpaWGSeaam2Njiblzsub2C+vTek/qh1glguNxiittqZbTRPe10cjQG4e/AxvG0e83Hn5K7XDIIKpygqiIgFEKIOms+5z/AMN3yRKz7nN+475Iia7kREUIiICIiCL3jdpbm6g01VxmT6mZJJFKPaAM9u4AsyzOSdrZOccc+qicPtev4rZ7qWw2rU1pltl+ooq2hlwXRSZwSDkEEcg/EFa/Ot+maDSHVG+WW0CUUMD2PibI7JYHxtftz6AuIHngDOUH2+HusqKbq/pmKnqJoo5qtrZWseWiQYdw4eY/FSC8YuqG0mjKewU9VEyetna+eEty6SNvvDHphwbz8MLAXh6oaWt6kUzquudb200L52VTSN0TwWgEZyM8kfmsyeLSkt12tP1nQCknrqORsUkjpcPbEe4jaDh3vd++BlE2onFZ28IN6tVm6gXJ93qaWiEtueyOpqZxG0H2jCWckN5xnnn3VghfTQUdRX1cNLRQSVFTK7bHFG3c559AAim0J9ZTMojWPqIW0gj9qZy8BgZjO7d2xjnPou2KRkrGyRPa+N4Dmuacgg9iD6LFHTHQtmpemtFo7UrjXXCqpmV9fSTSyRybS7DQW78ta3aI+MA7O3KvXp/pCh0PYfqi2VVdU03tnTB1ZL7R7c490HAw0YGAguZERAREQcJ2vdE5sbzG89nAA4/IqoyuSICIiAUQog6qr7rN+475IlV91m/cd8kRNdqIiKEREBERBQqHXjQsDqXV9qvkFAyKmrKYRTVLQ0GWdpPDvMkMDefQAeSmKRlYw8RGhRrbp1WR00Rkutva6ro9oe5znNGXMa1v2nOaNoyDyQg1/Zx2P8l6kTLo63Mq3U1RPbadrmNklic6GPccHnsDuP8APC8xzSx5a9pa4HDmkYI9QpcUfVfpy3oV+j7p2MnFr+hmjfRkk1HseHkBuD74B3/tc5ygiGpKeDmk0uLxca64VDXajijJp4ZGnbFDxvkBxjOcDJxgE+qjWpB+FPRUuoKq+XCm1DJb2NpjQ1VPBAx0kkchBwS9pbtIac45BxyEEqLdp6T9O6/VD7kyphqqGKjpqZkIDY42u3l28E7yXEnsOCrn7+Sxpbumd0tsFsp6DXt/jorYcUtP7KnIYzGNjiY8vAHA3Zwrgv2jn3+yVluud+uxMsolgqKeQU0lNx2aYw3cO/2s9/wRi5auspaJrHVlRDTte4MaZZAzc70Ge5+C+gEEAg5BWL6zohpW4VrJLrJebhRsZhlHVXSokjZJn+9BL9wdjjvjB7LJlNCympooIgRHEwMaCSSABgcnko12ImUQETKICIiAUQog6qr7rN+475IlV91m/cd8kRNdqIiKEREBERAQohQQI8SegXaK17NPRUxZZblmemLItsbHfrRA5OSOD5fa7LEmRlTc8Yx/4RRZ/wDE4f8A6SKEKCpWcej/AEy6mU9NBq7ShpaEPiLoW1Uxaahjm8ENAIIPlkjnCwlE3L2DBJJAwOVss6fzWqfSlCdO1kVVaA3bSmJoa2OMcBgHw7c8oPE6UXDWFZpS0/pjaxBcMSNq5JZNkgIcdhEYBByNuTuCvwZ3dlyCICZRUxjsgL4KO5UtxqqqGgqY5X0cvsqloGdjy0O259cEHzVr3m53DUV8js2l636PTUcubvXMAcGt2kfR4z/3pJBJb9jackEgG7bVQ09st8FFRsLIYW7WgnJPq5xPJcTkknkkknkoPrCIiAiIgFEKIOqq+6y/uO+SKlXn6JNj9h3yRE13IiIoREQEREBUKqiDFPiaslPeuj15dUSSsNv210ewj3ntyADkdsOKgCtinX7/AJN6s/yTvmFrrQc2nBBbwRzkKePhx1nb7700pzJPTwV1D/Z1ke9oOfKQtAG0O/BQMyvQs14uVlrPpdprqiiqSC0ywPLXY9MhBs+hninY18MrJGO5Bac5XZ5rWFbL/drVd/rW23Krpbllx+kxSlsmXZ3cj1ycrPml+qvWrVHsY9O2tlT7GAFz3UjWiQdt+55AJ/AoJX3y+Wyw0D629XCloaVhAdLPIGNBJwO/xKwjY9Uan6yXd0Nle6y6Wo6p30i5U4IlcBx7BjiS1ziBuLgMND2jGRz5+jug1z1DfTqnqzcPptfUOZMbfG8kDgEMkPYBv2djcjHmpC2i2UNnt0NBaqSGjooQRHBCwMYwEknAHbkkoOFis9BYrZFQWmlZTUkX2WNJPPmSTySfUklfeiICIiAioSVUIBRCiDpqzikmP+B3yRKvH0WbPbY7P8kRNdyIiKEREBEymUFCcKuVwlkZGwvke1jB3c44AWCOrniHs+lHPt2l2Q3q6kSMfIJMQ0rxlo3ce+Q4ctGOPNBd3iKu1voek+oaStrqWnqqyke2mhlmax85BbkMaTlxGR29Vr3Xtaq1PedV3EV2obhPXVQbsa+U52tyTgeg5K8VAXIHhUwqjgIJveH3pjomPRNvv0FFHd6m4wh0ktexsoYQcPY1hG0AODhnGfis300MNPBHDTRxxQMG1jI2hrWj0AHAUMfCj1IOnNRt0tcSz6su0w9lI5xBinIAaAMHIcQG445OVNIcFAx8VXCIgIiICImUGDOovVzVPT3WNUy+6U+k6RABguFI12XF32Q55JY12Q73Tg4wfxzFp68Ud/slFdrY98lFWRCaF72Fpc0jIODyF8N/iob+KjT8slJMSxktbSTwmUPp3FwI7jBO04PljOF4PU/VVD000PWXqOCBszGtpqOlL9jZn/qNHB7NDnY9GlBfmfgUDgeyjt0q8SVou9JFRa6LLZdNz81cbcUz2gZBPOWH9XHOSM5GcCQlNUQVULZqaWOWI8h8bgQf5IKVn3Sf9x3yRdkrd8b2/tAhES5oiIoQ9kRB1TSRwQvlmkbHFG0ue95Aa1o5JJPA/FYj1z4g9E6XqX0sFTLeatjtskdANzW8Ag7zhjhz+qSiIIsdU+sWpOoM/s6iZ9utfs/Zut9LM4RScgkv/b5AIznGOFjQ9kRBRERBcGg6W212sbPSXxpdbZ6hkU+15aQwnBII9FcfWjpvW9ONT/RZS2W2Ve6WgnDgS+MEZDh3DhkZ/HjKIjF/+EbQjL9q2XUVwhL6G0kGDc1pa+c9s55BbkOBA7gcqaA7oiNckREBERAPZeRqS9QWO2unkY6ad59nTUsfMlRKfssYPXPc9mjLjgAkEQdljp5qW2sdWc1kv9tUP9mxhLz5O2cEgYbkd9oUG/EP1Pk1/qmSntlXM7TVE7FNEQWNkeODKRwTny3cgE9slEQYl/FXbofqLqnRDz+jt2np4XB2ad59pDl2Mu9m7Ld3ujnGURBI3pl4nLdWRtpNexCgnYxoFdBG58chDeS5rQSCTzgDHPkiIg//2Q=='
  },
  votes: {
    yes: {
      type: Number,
      default: 0
    },
    no: {
      type: Number,
      default: 0
    },
    thumbs: {
      type: Number,
      default: 0
    }
  }
});

candidateSchema.pre<Candidate & mongoose.Document>('remove', async function(
  next: mongoose.HookNextFunction
) {
  try {
    await positionModel.findByIdAndUpdate(this.position, {
      $pull: { candidates: this._id }
    });
  } catch (error) {
    return next(error);
  }
});

const candidateModel = mongoose.model<Candidate & mongoose.Document>(
  'Candidate',
  candidateSchema
);

export default candidateModel;
